---
import Layout from "../layouts/Layout.astro";
---
<head>
    <meta charset="UTF-8">

    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
</head>
<Layout title="Miembros">
<section class="container px-4 mx-auto">
    <div class="flex items-center gap-x-3">
        <h2 class="text-lg font-medium text-gray-800">Miembros</h2>
        <span id="userCount" class="px-3 py-1 text-xs text-blue-600 bg-blue-100 rounded-full"></span>
        
        <!-- Botón para crear un nuevo miembro -->
        <a href="/CreateMember" class="ml-auto">
            <button class="flex items-center px-5 py-2 text-sm text-gray-700 capitalize transition-colors duration-200 bg-white border rounded-md gap-x-2 hover:bg-gray-100 ">
                <span>Crear Miembro</span>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 rtl:-scale-x-100">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                </svg>
            </button>
        </a>
    </div>

    <div class="flex flex-col mt-6">
        <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
            <div class="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
                <div class="overflow-hidden border border-gray-200 md:rounded-lg">
                    <table id="membersTable" class="min-w-full divide-y divide-gray-200 ">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="py-3.5 px-4 text-sm font-normal text-left rtl:text-right text-gray-500">
                                    <div class="flex items-center gap-x-3">
                                        <input type="checkbox" class="text-blue-500 border-gray-300 rounded ">
                                        <span>Nombre</span>
                                    </div>
                                </th>

                                <th scope="col" class="py-3.5 px-4 text-sm font-normal text-left rtl:text-right text-gray-500 ">
                                    <div class="flex items-center gap-x-3">
                                        <input type="checkbox" class="text-blue-500 border-gray-300 rounded">
                                        <span>Apellido</span>
                                    </div>
                                </th>

                                <th scope="col" class="px-4 py-3.5 text-sm font-normal text-left rtl:text-right text-gray-500">
                                    <button class="flex items-center gap-x-2">
                                        <span>Role</span>

                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z" />
                                        </svg>
                                    </button>
                                </th>

                                <th scope="col" class="px-4 py-3.5 text-sm font-normal text-left rtl:text-right text-gray-500">Correo Electrónico</th>

                             

                                <th scope="col" class="relative py-3.5 px-4">
                                    <span class="sr-only">Edit</span>
                                </th>
                            </tr>
                        </thead>
                        <tbody id="membersList" class="bg-white divide-y divide-gray-200 ">
                    
                            
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="flex items-center justify-between mt-6">
        <!-- Botón Anterior -->
        <button id="prevPage" class="flex items-center px-5 py-2 text-sm text-gray-700 capitalize transition-colors duration-200 bg-white border rounded-md gap-x-2 hover:bg-gray-100" disabled>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 rtl:-scale-x-100">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 15.75L3 12m0 0l3.75-3.75M3 12h18" />
            </svg>
            <span></span>
        </button>

        <!-- Números de página -->
        <div id="paginationNumbers" class="items-center hidden lg:flex gap-x-3">
            <!-- Aquí se generarán dinámicamente los números de página -->
        </div>

        <!-- Botón Siguiente -->
        <button id="nextPage" class="flex items-center px-5 py-2 text-sm text-gray-700 capitalize transition-colors duration-200 bg-white border rounded-md gap-x-2 hover:bg-gray-100">
            <span></span>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 rtl:-scale-x-100">
                <path stroke-linecap="round" stroke-linejoin="round" d="M17.25 8.25L21 12m0 0l-3.75 3.75M21 12H3" />
            </svg>
        </button>
    </div>
</section>
</Layout>

<script is:inline>
    let currentPage = 1;
    const usersPerPage = 5; // Cambia este valor para ajustar la cantidad de usuarios por página
    let totalPages = 1; // Inicialmente 1, se actualizará después de obtener los datos

    async function fetchMembers(page) {
        try {
            const response = await fetch(`https://dummyjson.com/users?limit=${usersPerPage}&skip=${(page - 1) * usersPerPage}`);
            const data = await response.json();
            const membersList = document.getElementById('membersList');
            membersList.innerHTML = ''; // Limpiar el contenido antes de agregar nuevos datos
            membersList.innerHTML = data.users.map(user => `
                <tr>
                    <td class="px-4 py-4 text-sm font-medium text-gray-700 whitespace-nowrap">
                        ${user.firstName}
                    </td>
                    <td class="px-4 py-4 text-sm font-medium text-gray-700 whitespace-nowrap">
                        ${user.lastName}
                    </td>
                    <td class="px-4 py-4 text-sm text-gray-500 whitespace-nowrap">
                        ${user.role}
                    </td>
                    <td class="px-4 py-4 text-sm text-gray-500 whitespace-nowrap">
                        ${user.email}
                    </td>
                    <td class="px-4 py-4 text-sm whitespace-nowrap">
                        <div class="flex items-center gap-x-6">
                            <a href="/DetailMember">
                                <button>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16">
                                        <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8M1.173 8a13 13 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5s3.879 1.168 5.168 2.457A13 13 0 0 1 14.828 8q-.086.13-.195.288c-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5s-3.879-1.168-5.168-2.457A13 13 0 0 1 1.172 8z"/>
                                        <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5M4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0"/>
                                    </svg>
                                </button>
                            </a>
                            <div x-data="{ isOpen: false }" class="relative flex justify-center">
                                <!-- Botón de eliminación -->
                                <button @click="isOpen = true" class="text-gray-500 transition-colors duration-200 hover:text-red-500 focus:outline-none">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                                    </svg>
                                </button>
                            
                                <!-- Modal -->
                                <div x-show="isOpen" x-cloak
                                    class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-10"
                                    aria-labelledby="modal-title" role="dialog" aria-modal="true">
                                    
                                    <div class="relative px-4 pt-5 pb-4 bg-white rounded-lg shadow-xl sm:w-96 sm:p-6">
                                        <div class="flex justify-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="w-8 h-8 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
                                            </svg>
                                        </div>
                                        
                                        <div class="mt-2 text-center">
                                            <h3 class="text-lg font-medium leading-6 text-gray-800 capitalize" id="modal-title">¿Estás seguro?</h3>
                                            <p class="mt-2 text-sm text-gray-500">
                                                Esta acción no se puede deshacer. ¿Deseas continuar?
                                            </p>
                                        </div>
                                        
                                        <div class="mt-5 flex justify-between">
                                            <button @click="isOpen = false" class="px-4 py-2 text-sm font-medium text-gray-700 border rounded-md hover:bg-gray-100">
                                                Cancelar
                                            </button>
                                        
                                            <button @click="eliminarMiembro()" class="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-500">
                                                Eliminar
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <a href="/EditMember">
                                <button>
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" />
                                    </svg>
                                </button>
                            </a>
                        </div>
                    </td>
                </tr>
            `).join('');

            // Actualizar el conteo de usuarios y el total de páginas
            document.getElementById('userCount').textContent = `Total Usuarios: ${data.total}`;
            totalPages = Math.ceil(data.total / usersPerPage);

            // Generar los números de página
            const paginationNumbers = document.getElementById('paginationNumbers');
            paginationNumbers.innerHTML = '';

            // Mostrar los primeros dos números de página
            if (currentPage > 3) {
                createPageLink(1, paginationNumbers);
                createPageLink(2, paginationNumbers);
                addDots(paginationNumbers);
            }

            // Mostrar la página actual y las adyacentes
            for (let i = Math.max(1, currentPage - 1); i <= Math.min(totalPages, currentPage + 1); i++) {
                createPageLink(i, paginationNumbers);
            }

            // Mostrar los dos últimos números de página
            if (currentPage < totalPages - 2) {
                addDots(paginationNumbers);
                createPageLink(totalPages - 1, paginationNumbers);
                createPageLink(totalPages, paginationNumbers);
            }

            // Habilitar o deshabilitar botones de navegación
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages;
        } catch (error) {
            console.error('Error fetching members:', error);
        }
    }

    function createPageLink(pageNumber, container) {
        const pageLink = document.createElement('a');
        pageLink.href = '#';
        pageLink.textContent = pageNumber;
        pageLink.className = `px-4 py-2 mx-1 text-gray-700 transition-colors duration-300 transform bg-white rounded-md sm:inline hover:hover:bg-gray-100 hover:text-black ${pageNumber === currentPage ? 'border border-gray-700' : ''}`;
        pageLink.addEventListener('click', (e) => {
            e.preventDefault();
            currentPage = pageNumber;
            fetchMembers(currentPage);
        });
        container.appendChild(pageLink);
    }

    function addDots(container) {
        const dots = document.createElement('span');
        dots.textContent = '...';
        dots.className = 'px-4 py-2 mx-1 text-gray-700';
        container.appendChild(dots);
    }

    document.getElementById('prevPage').addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            fetchMembers(currentPage);
        }
    });

    document.getElementById('nextPage').addEventListener('click', () => {
        if (currentPage < totalPages) {
            currentPage++;
            fetchMembers(currentPage);
        }
    });

    fetchMembers(currentPage);
</script>